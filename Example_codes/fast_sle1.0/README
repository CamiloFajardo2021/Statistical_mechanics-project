
    This file is part of fast_sle (version 1.0), which implements 
    a fast algorithm for simulating the Schramm-Loewner evolution (SLE)  

    Copyright (C) 2005 Tom Kennedy

    fast_sle is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    fast_sle is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with fast_sle; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    E-mail contact: tgk@math.arizona.edu
    Ordinary mail: 
	Tom Kennedy
        Mathematics Department
	University of Arizona
	Tucson, ZA 85721, USA

------------------------------------------------------------------------------

This code is for simulating chordal SLE. It uses the algorithm described in 
  "A Fast Algorithm for Simulating the Chordal Schramm-Loewner Evolution,"
  Tom Kennedy.
This paper is archived in www.arXiv.org as math.PR/0508002 

This code can be used at different levels of sophistication.

1. Drawing a picture. The script "run_fast_sle" will compile and 
run the program "driver_sle.c". (This is a shell script that should 
run on most unix type systems, e.g., linux. If this script does not 
run on your unix system, I am happy to try to fix it. 
If you are unfortunate enough to be running windows, the script will 
be useless and you will need to figure out how to compile and run the program.)
The script contains values for parameters like kappa, the 
number of "steps" in the discretization, etc. You can change them by 
editing the script. This program just generates a single sample of the 
SLE. The coordinates of the points on the SLE trace are written to the file 
"sle.plt". You can then plot this file with your favorite plotting program. 
Note that this script sets the seed of the random number generator. 
If you run the script a second time without changing this you will 
get the same SLE sample. 

2. Monte Carlo simulations. The program driver_sle.c is just a 
"driver" program. All the real work in done in member functions. 
You can modify this driver program (or write your own) to generate 
multiple samples of the SLE and study what ever you want. 
This will probably require adding member functions to the class 
"complex_walk". 



Documentation 
-------------

The algorithm is explained in the paper cited above. The code contains 
comments explaining details of the implementation. An overview of the 
code follows.

For a conformal map f(z), we let f^(z)=1/f(1/z). 
The class ``laurent'' represents the power series of f^, which we 
refer to as the hat power series of f.
This class specifies the order at which we truncate the hat
power series and the coefficients of the series to that order. 
Overlaid arithmetic operators for addition, subtraction and multiplication
are defined for the hat power series. (Note that this is 
not the same as performing the operation on the function represented 
by the hat power series.)
An overlaid arithmetic operator for multiplication by a complex number
is also defined. Member functions for the class ``laurent'' include: 

compose(): This computes the hat power series of 
the composition of two functions. As we have noted before, this 
may be done by composing the hat power series of the 
two functions.

evaluate(): This evaluates the hat power
series at a given point. If the hat power series represents f, then 
to compute f(z) we use 1/evaluate(1/z). 

approximate_titled_slit_map():
This computes the hat power series for the conformal map that 
produces a slit at angle $\alpha \pi$. 

approximate_vertical_slit_map():
This computes the hat power series for the conformal map that 
produces a vertical slit offset from the origin.

approximate_frac_pow():
This computes the power series of $(1-cz)^{-\alpha}$. 

shift():
This computes the hat power series of g when we are given the hat power
series of f where g(z)=f(z)+c. 

The class ``complex_walk'' is an array of points in the complex plane
which represents the points on the SLE trace. Member functions for this 
class include: 

chordal_sle_tilted_slit_laurent():
This uses the conformal maps for slits at angle $\alpha \pi$  and 
hat power series to approximate the SLE trace. 
The routine "chordal_sle_tilted_slit_exact()" also 
uses the conformal maps for slits at angle $\alpha \pi$, but does 
not uses the approximation of the hat power series. So these
two routines should return walks in the complex plane that are 
almost identical. 

chordal_sle_vertical_slit_laurent(): 
This uses the conformal maps for vertical slits and 
hat power series to approximate the SLE trace. 
The routine "chordal_sle_tilted_slit_exact() also
uses the conformal maps for vertical slits, but no hat power series.

compute_chordal_dt(): This function and the next one
are not member functions of the class ``complex_walk,'' but are used 
by member functions of that class. This function defines Delta_k, 
the length of the subintervals in the partition of the time interval. 

compute_chordal_dx(): This function 
defines delta_k, the increments of the 
stochastic process that approximates the driving function kappa B_t. 

Random number generation
------------------------

By default, the code will use drand48(). You can make it use sprng() 
by simply changing the value of RANDOM_NUMBER_GENERATOR from 1 to 2 
in the file src/random_number_generator.h
sprng() may be downloaded from  http://sprng.cs.fsu.edu/ 
If it is not installed in the "usual" place you may need to modify 
the file "Makefile" to specify the paths where the compiler should search.
You can also use you own generator. See src/random_number_generator.h
for documentation on how to do this.

Installation
------------

There is a file INSTALL, but it basically just says that run_fast_sle
will compile and run the program.

Requirements
------------

	gcc

Feedback
--------

Feedback is very welcome. If you use this code in research that 
leads to a published paper I would greatly appreciate the reference. 
Comments on how to make the code more usuable or suggestions for improving
it would be especially helpful. If you make improvements that you 
think should be included in future releases, let me know. 

Author
------	

Tom Kennedy

e-mail: 
	tgk@math.arizona.edu

ordinary mail: 
	Mathematics Department
	University of Arizona
	Tucson, AZ 85721, USA

Support
-------

The development of this code was part of research supported by the
National Science Foundation under grants DMS-0201566 and DMS-0501168. 




